# .github/workflows/sync-images-to-ghcr.yaml
name: üé´ Sync Images to GHCR

# Triggers: Run manually or on push/merge to the main branch
on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI
  push:
    branches:
      - main # Or your primary branch name
    paths:
      # Watch the directory containing the definitions
      - 'docker-image-sync-definitions/**'
      - '.github/workflows/sync-images-to-ghcr.yaml' # Or if the workflow file itself changes

permissions:
  contents: read # Needed to checkout the code and read the YAML file(s)
  packages: write # Needed to write (push) to GitHub Container Registry (GHCR)

jobs:
  # --- Job 1: Read YAML files from directory and prepare the initial matrix ---
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }} # Export the raw matrix as an output
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Install yq
      - name: Install yq
        run: |
          echo "‚ÑπÔ∏è Installing yq..."
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          echo "‚úÖ yq installed."
          echo "üì¶ yq version: $(yq --version)"

      # Step 2: Install jq (needed for JSON processing/display)
      - name: Install jq
        run: |
          echo "‚ÑπÔ∏è Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
          echo "‚úÖ jq installed."
          echo "üì¶ jq version: $(jq --version)"

      # Step 3: Find YAML files, aggregate data, and generate matrix
      - name: Generate matrix from YAML files
        id: set_matrix
        run: |
          echo "‚ÑπÔ∏è Finding YAML files in docker-image-sync-definitions/ ..."
          # Generate the flat JSON array of image objects
          FLAT_JSON_ARRAY=$(find docker-image-sync-definitions -name '*.yml' -type f -exec yq -o=json --indent 0 '.' {} + | jq -s 'flatten | map(select(.dockerhub_repository != null and .dockerhub_digest != null and .ghcr_package_name != null and .ghcr_tag != null))' | yq --indent 0) # Added validation

          # Construct the final {"include": [...]} structure
          FINAL_JSON_OUTPUT=$(printf '{"include":%s}' "$FLAT_JSON_ARRAY")

          # Check the generated array and set the output
          if [ -z "$FLAT_JSON_ARRAY" ] || [ "$FLAT_JSON_ARRAY" = "null" ] || [ "$FLAT_JSON_ARRAY" = "[]" ]; then
            echo "‚ö†Ô∏è WARNING: No valid image definitions found or failed to generate JSON array."
            echo "Setting matrix to empty include."
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Raw Matrix JSON generated."
            echo "matrix=$FINAL_JSON_OUTPUT" >> $GITHUB_OUTPUT
          fi

      # Step 4: Display the generated raw matrix JSON (formatted)
      - name: Display Raw Generated Matrix JSON
        run: |
          echo "--------------------------------------------------"
          echo "Raw Matrix Output (before filtering):"
          echo '${{ steps.set_matrix.outputs.matrix }}' | jq '.'
          echo "--------------------------------------------------"

  # --- Job 2: Filter out images that already exist in GHCR (using Python) ---
  filter_existing_images:
    runs-on: ubuntu-latest
    needs: prepare_matrix # Depends on the job that prepares the raw matrix
    outputs:
      filtered_matrix: ${{ steps.filter_step.outputs.filtered_matrix }} # Export the filtered matrix
    # Only run if the raw matrix is not empty
    if: needs.prepare_matrix.outputs.matrix != '{"include":[]}'
    steps:
      # Step 1: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      # Step 2: Install jq (needed for displaying matrix)
      - name: Install jq
        run: |
          echo "‚ÑπÔ∏è Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
          echo "‚úÖ jq installed."
          echo "üì¶ jq version: $(jq --version)"

      # Step 3: Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Check GHCR and filter the matrix using Python
      - name: Check GHCR and Filter Matrix (Python)
        id: filter_step
        env:
          RAW_MATRIX_JSON: ${{ needs.prepare_matrix.outputs.matrix }}
          GH_OWNER_LOWERCASE: ${{ github.repository_owner }} # Convert owner to lowercase
          # GITHUB_OUTPUT is automatically available to the script in newer runners
          # If using older runners, might need: GITHUB_OUTPUT: ${{ runner.temp }}/github_output_${{ github.run_id }}_${{ github.job }}
        run: |
          python - <<EOF
          import json
          import os
          import subprocess
          import sys

          # Get environment variables
          raw_matrix_json = os.environ.get('RAW_MATRIX_JSON')
          gh_owner = os.environ.get('GH_OWNER_LOWERCASE')
          # Get the path to the GitHub Actions output file
          github_output_env = os.environ.get('GITHUB_OUTPUT')

          if not raw_matrix_json or not gh_owner:
              print("Error: Missing required environment variables (RAW_MATRIX_JSON or GH_OWNER_LOWERCASE).", file=sys.stderr)
              sys.exit(1)
          if not github_output_env:
              print("Error: GITHUB_OUTPUT environment variable not found.", file=sys.stderr)
              sys.exit(1)


          print(f"‚ÑπÔ∏è Filtering matrix based on images present in GHCR (ghcr.io/{gh_owner}/...)")
          print("--------------------------------------------------")

          images_to_keep = []
          images_to_skip_log = []

          try:
              # Parse the input JSON
              matrix_data = json.loads(raw_matrix_json)
              images_to_check = matrix_data.get('include', [])

              if not isinstance(images_to_check, list):
                  print("Error: Invalid matrix format - 'include' key is not a list.", file=sys.stderr)
                  sys.exit(1)

              # Iterate through each image definition
              for image_data in images_to_check:
                  # Basic validation for required keys in each image object
                  required_keys = ['dockerhub_repository', 'dockerhub_tag', 'ghcr_package_name', 'ghcr_tag']
                  if not all(key in image_data for key in required_keys):
                      print(f"‚ö†Ô∏è Skipping invalid entry: {image_data} - Missing required keys.", file=sys.stderr)
                      continue

                  dh_repo = image_data['dockerhub_repository']
                  dh_tag = image_data['dockerhub_tag'] # For logging
                  ghcr_pkg = image_data['ghcr_package_name']
                  ghcr_tag = image_data['ghcr_tag']

                  # Construct the full GHCR image name
                  ghcr_image_full_name = f"ghcr.io/{gh_owner}/{ghcr_pkg}:{ghcr_tag}"

                  print(f"üîé Checking: {ghcr_image_full_name}")

                  # Check if the image manifest exists on GHCR using subprocess
                  process = subprocess.run(
                      ['docker', 'manifest', 'inspect', ghcr_image_full_name],
                      capture_output=True, text=True, check=False
                  )

                  # Check the return code of the docker command
                  if process.returncode == 0:
                      # Image FOUND in GHCR - Skip
                      skip_message = f"‚úÖ Exists! Skipping: {ghcr_image_full_name} (Source: {dh_repo}:{dh_tag})"
                      print(skip_message)
                      images_to_skip_log.append(f" - {ghcr_image_full_name}")
                  else:
                      # Image NOT found in GHCR - Keep
                      keep_message = f"‚ÑπÔ∏è Missing! Will sync: {ghcr_image_full_name} (Source: {dh_repo}:{dh_tag})"
                      print(keep_message)
                      images_to_keep.append(image_data) # Keep the original image data dictionary

          except json.JSONDecodeError:
              print(f"Error: Failed to parse RAW_MATRIX_JSON.", file=sys.stderr)
              sys.exit(1)
          except Exception as e:
              print(f"An unexpected error occurred: {e}", file=sys.stderr)
              sys.exit(1)


          print("--------------------------------------------------")
          if images_to_skip_log:
              print("üìã Skipped Images (already in GHCR):")
              print("\n".join(images_to_skip_log))
          else:
              print("‚úÖ No images were skipped (none found in GHCR).")
          print("--------------------------------------------------")

          # Construct the final filtered matrix object
          filtered_matrix_obj = {"include": images_to_keep}

          if not images_to_keep:
             print("‚ö†Ô∏è All images already exist in GHCR or no valid images found. Filtered matrix is empty.")
          else:
             # --- MODIFIED SECTION START ---
             # Print the raw list of images to keep, formatted as JSON for better readability in logs
             print("üìã Images to be Synchronized (raw list):")
             print(json.dumps(images_to_keep, indent=2))
             # --- MODIFIED SECTION END ---
          print("--------------------------------------------------")

          # Convert the filtered matrix object to a JSON string
          filtered_matrix_json_output = json.dumps(filtered_matrix_obj)

          # --- REVERTED SECTION START ---
          # Set the output for the next job using environment file redirection
          # This is the recommended way instead of ::set-output
          try:
              with open(github_output_env, 'a') as f:
                  # Ensure the JSON string is properly escaped for multiline output if needed
                  # This is the standard GitHub Actions recommendation
                  escaped_json = filtered_matrix_json_output.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
                  f.write(f"filtered_matrix={escaped_json}\n")
              print("‚úÖ Filtered matrix generated and saved to output using Python file I/O.")

          except Exception as e:
              print(f"An unexpected error occurred during output writing: {e}", file=sys.stderr)
              sys.exit(1)
          # --- REVERTED SECTION END ---

          EOF # End of Python script heredoc

      # Step 5: Display the filtered matrix JSON (using jq for formatting)
      - name: Display Filtered Matrix JSON
        run: |
          echo "--------------------------------------------------"
          echo "Final Filtered Matrix Output (for sync job):"
          # Read the output variable back from the environment file if needed, or use the step output context
          echo '${{ steps.filter_step.outputs.filtered_matrix }}' | jq '.'
          echo "--------------------------------------------------"


  # --- Job 3: Synchronize images in parallel (using the filtered matrix) ---
  sync_image:
    # Needs the job that filters the matrix
    needs: filter_existing_images
    # Only run if the *filtered* matrix has images
    # Check against the output of the filtering step
    if: needs.filter_existing_images.outputs.filtered_matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # If one image fails, others continue
      # Use fromJson with the *filtered* {"include": [...]} structure from the Python script output
      matrix: ${{ fromJson(needs.filter_existing_images.outputs.filtered_matrix) }}
    steps:
      - name: Print Image Details for Sync
        run: |
          echo "--------------------------------------------------"
          echo "Syncing Image:"
          echo "  Docker Hub Repo:    ${{ matrix.dockerhub_repository }}"
          echo "  Docker Hub Tag:     ${{ matrix.dockerhub_tag }}" # Primarily for reference
          echo "  Docker Hub Digest:  ${{ matrix.dockerhub_digest }}" # Used for pull
          echo "  GHCR Package Name:  ${{ matrix.ghcr_package_name }}"
          echo "  GHCR Tag:           ${{ matrix.ghcr_tag }}"
          echo "  Target GHCR Image:  ghcr.io/${{ github.repository_owner,, }}/${{ matrix.ghcr_package_name }}:${{ matrix.ghcr_tag }}"
          echo "--------------------------------------------------"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, Tag, and Push Image with Retries (Bash)
        env:
          # Environment variables for the script, taken from the matrix
          DH_REPO: ${{ matrix.dockerhub_repository }}
          DH_TAG: ${{ matrix.dockerhub_tag }} # Used for logging
          DH_DIGEST: ${{ matrix.dockerhub_digest }}
          GHCR_PKG: ${{ matrix.ghcr_package_name }}
          GHCR_TAG: ${{ matrix.ghcr_tag }}
          # Build the full image names
          GHCR_IMAGE_FULL_NAME: ghcr.io/${{ github.repository_owner }}/${{ matrix.ghcr_package_name }}:${{ matrix.ghcr_tag }}
          DH_IMAGE_FULL_NAME_DIGEST: ${{ matrix.dockerhub_repository }}@${{ matrix.dockerhub_digest }}
        run: |
          # Bash function to execute a command with retries (same as before)
          retry_command() {
            local max_attempts=$1
            local wait_times=($2)
            local cmd=("${@:3}")
            local attempt=1
            local exit_code=0

            while [ $attempt -le $max_attempts ]; do
              echo "   ‚è≥ Attempt $attempt/$max_attempts: Executing command -> ${cmd[*]}"
              "${cmd[@]}"
              exit_code=$?
              if [ $exit_code -eq 0 ]; then
                echo "   ‚úÖ Command executed successfully."
                return 0
              fi
              if [ $attempt -eq $max_attempts ]; then
                echo "   ‚ùå ERROR: Command failed after $max_attempts attempts."
                return $exit_code
              fi
              local wait_index=$((attempt - 1))
              local wait_time
              if [ $wait_index -lt ${#wait_times[@]} ]; then
                wait_time=${wait_times[$wait_index]}
              else
                wait_time=${wait_times[-1]}
              fi
              echo "   ‚ö†Ô∏è Command failed with code $exit_code. Waiting ${wait_time}s before next attempt..."
              sleep "$wait_time"
              attempt=$((attempt + 1))
            done
          }

          # --- PULL with Retry ---
          echo " PULL: Attempting to download image from Docker Hub: $DH_IMAGE_FULL_NAME_DIGEST"
          retry_command 4 "30 60 300" docker pull "$DH_IMAGE_FULL_NAME_DIGEST"
          if [ $? -ne 0 ]; then
            echo "‚ùå FATAL ERROR: Pull failed for $DH_IMAGE_FULL_NAME_DIGEST after all attempts."
            exit 1 # Fail the job for this image
          fi
          echo "‚úÖ PULL: Download complete."

          # --- TAG ---
          echo "üè∑Ô∏è TAG: Tagging image for GHCR as $GHCR_IMAGE_FULL_NAME"
          docker tag "$DH_IMAGE_FULL_NAME_DIGEST" "$GHCR_IMAGE_FULL_NAME"
          if [ $? -ne 0 ]; then
            echo "‚ùå ERROR: Tagging failed for $GHCR_IMAGE_FULL_NAME"
            exit 1
          fi
          echo "‚úÖ TAG: Tagging complete."

          # --- PUSH with Retry ---
          echo " PUSH: Attempting to upload image to GHCR: $GHCR_IMAGE_FULL_NAME"
          retry_command 4 "30 60 300" docker push "$GHCR_IMAGE_FULL_NAME"
          if [ $? -ne 0 ]; then
            echo "‚ùå FATAL ERROR: Push failed for $GHCR_IMAGE_FULL_NAME after all attempts."
            exit 1 # Fail the job for this image
          fi
          echo "‚úÖ PUSH: Upload complete."
          echo "üéâ Success: Image $DH_REPO:$DH_TAG synchronized to GHCR as $GHCR_IMAGE_FULL_NAME"
          echo "--------------------------------------------------"
